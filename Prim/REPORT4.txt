Algorithms
Practical 4: Prim's algorithm

Author 1: Martin do Rio Rico          | Login 1: martin.dorio
Author 2: Rodrigo Naranjo Gonzalez    | Login 2: r.naranjo
Author 3: Guillermo Fernandez Sanchez | Login 1: guillermo.fernandezs

The Prim's algorithm is a greedy algorithm that finds a minimum spanning tree for a weighted undirected graph. 
This means it finds a subset of the edges that forms a tree that includes every vertex, where the total weight 
of all the edges in the tree is minimized. 
The algorithm operates by building this tree one vertex at a time, from an arbitrary starting vertex, at each 
step adding the cheapest possible connection from the tree to another vertex.


We implemented the algorithms and tested it with three sample matrix, each one with different complexity and
size, before measuring the algorithms are tested against this samples to ensure its correct operation:

############################################################################################################

Fist test for the following adjacency matrix:
 0     1     8     4     7
 1     0     2     6     5
 8     2     0     9     5
 4     6     9     0     3
 7     5     5     3     0

Minimum spanning tree:
Edges: (0, 1),(1, 2),(0, 3),(3, 4),
Weight: 10

------------------------------------------------------------------------------------------------------------

Second test for the following adjacency matrix:
 0     1     4     7
 1     0     2     8
 4     2     0     3
 7     8     3     0

Minimum spanning tree:
Edges: (0, 1),(1, 2),(2, 3),
Weight: 6

------------------------------------------------------------------------------------------------------------

Third test for the following adjacency matrix:
 0     7    99     5    99    99    99
 7     0     8     9     7    99    99
99     8     0    99     5    99    99
 5     9    99     0    15     6    99
99     7     5    15     0     8     8
99    99    99     6     8     0    11
99    99    99    99     9    11     0

Minimum spanning tree:
Edges: (0, 3),(3, 5),(0, 1),(1, 4),(4, 2),(4, 6),
Weight: 39

##############################################################################################################

We have run the algorithms with random vectors of different sizes (10, 20, 40, 80, 160, 320), this time smaller
values, yet following a geometric progression (*2), because when using or last values, much higher, the results
became unstable and unpredictable.
We got the execution time through a function after which we performed an empirical verification of the complexity 
of the algorithms.

All the times are measured in microseconds (ms).

The executions times were calculated in a computer of the following characteristics:

    Os: Zorin OS 16 x86_64
    CPU: Intel i5-10400F (12) @ 4.300GHz
    Memory: 15946MiB

##############################################################################################################

Execution times of the Prim's algorithm

      n              t(n)        t(n)/n^1.6        t(n)/n^1.8        t(n)/n^2.0
*    10             1.020          0.025621          0.016166          0.010200
*    20             3.580          0.029664          0.016294          0.008950
*    40            12.850          0.035124          0.016796          0.008031
*    80            43.070          0.038836          0.016166          0.006730
*   160           148.890          0.044287          0.016049          0.005816
    320           538.000          0.052789          0.016654          0.005254

n^1.6: underestimated bound
n^1.8: tight bound
n^2.0: overestimated bound

* When the execution time measured is smaller than 500 microseconds we consider that the figure is not significant 
enough. To solve this we run the algorithm 1000 times and then using the execution time obtained we can guarantee 
that it is a reliable result.
  This incident will be marked with an asterisk.

After running the program we can observe the following...

- The underestimated bound is constantly growing as we increase 'n' so we can deduce it tends to infinity,
  while the overestimated bound is constantly decreasing, therefore it tends to zero.

- We can clearly see that despite being close to a perfect cuadratic growth, when its complexity is n^2.0
  it is overestimated, as it decreases.

- The tight bound tends to a constant contained in an interval we estimate is located between 0.0160 and 0.0168.

- The values deviate slighty but remain somewhat constant, so we consider that irregularity nor relevant enough.

- The algorithm follows a quadratic growth, and its computational complexity is n^1.8.

##############################################################################################################

CONCLUSION:

